{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","darkModeMediaQuery","this","setTheme","removeEventListener","changeTheme","e","darkModeOn","matches","body","document","querySelector","classList","add","remove","console","log","window","matchMedia","addListener","tabIndex","React","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gNAGqBA,G,kNACXC,wB,oEAGNC,KAAKC,a,6CAIDD,KAAKD,oBACPC,KAAKD,mBAAmBG,oBAAoB,SAAUF,KAAKG,e,kCAInDC,GACV,IAAIC,EAAaD,EAAEE,QACfC,EAAOC,SAASC,cAAc,QAC9BF,IACEF,EACFE,EAAKG,UAAUC,IAAI,cAEnBJ,EAAKG,UAAUE,OAAO,eAG1BC,QAAQC,IAAR,uBAA4BT,EAAa,kBAAU,mBAAnD,Q,iCAIAL,KAAKD,mBAAqBgB,OAAOC,WAAW,gCAC5ChB,KAAKD,mBAAmBkB,YAAYjB,KAAKG,e,+BAIzC,OACE,2BAASe,SAAU,GACjB,kD,GAlCyBC,cCS3BC,G,MAAcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,4DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BzB,QAAQC,IACN,iHAKEa,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBnB,QAAQC,IAAI,sCAGRa,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL7B,QAAQ6B,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDiBnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAImB,IACpBC,cACAjC,OAAOO,SAAS2B,MAEJC,SAAWnC,OAAOO,SAAS4B,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,cAAN,sBAEP5B,IAgEV,SAAiCM,EAAeC,GAE9CyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BhB,OAAOO,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL5B,QAAQC,IACN,oEAvFAgD,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjClB,QAAQC,IACN,iHAMJW,EAAgBC,EAAOC,OCzC7BE,I","file":"static/js/main.7ac2bf14.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component<{}, {}> {\n  private darkModeMediaQuery?: MediaQueryList;\n\n  componentDidMount() {\n    this.setTheme();\n  }\n\n  componentWillUnmount() {\n    if (this.darkModeMediaQuery) {\n      this.darkModeMediaQuery.removeEventListener('change', this.changeTheme);\n    }\n  }\n\n  changeTheme(e: MediaQueryListEvent) {\n    let darkModeOn = e.matches;\n    let body = document.querySelector('body');\n    if (body) {\n      if (darkModeOn) {\n        body.classList.add('dark-theme');\n      } else {\n        body.classList.remove('dark-theme');\n      }\n    }\n    console.log(`Dark mode is ${darkModeOn ? 'üåí on' : '‚òÄÔ∏è off'}.`);\n  }\n\n  setTheme() {\n    this.darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this.darkModeMediaQuery.addListener(this.changeTheme);\n  }\n\n  render() {\n    return (\n      <section tabIndex={0}>\n        <h2>Demo React App!</h2>\n      </section>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif (process.env.NODE_ENV === 'production') {\n  serviceWorker.register();\n} else {\n  serviceWorker.unregister();\n}\n"],"sourceRoot":""}